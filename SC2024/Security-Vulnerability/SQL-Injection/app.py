from flask import Flask, request, g
import sqlite3

app = Flask(__name__)
DATABASE = 'test.db'

# DB 연결 함수
def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database=sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

# DB 초기화 및 샘플 데이터 삽입
def init_db():
    with app.app_context():
        db = get_db()
        db.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
        db.execute("INSERT INTO users (username, password) values ('admin', 'admin')")
        db.execute("INSERT INTO users (username, password) VALUES ('user', 'password')")
        db.commit()


# 취약한 SQL 인젝션 공격 가능 코드
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # SQL 인젝션 취약 코드
        query = "SELECT * FROM users WHERE username = '{}' AND password = '{}'".format(username, password)
        print("취약한 SQL Query:", query)   # 쿼리 확인용 출력
        cur = get_db().execute(query)
        user = cur.fetchone()

        if user:
            return f"환영합니다, {user[1]}님!"
        else:
            return "로그인 실패"

    return '''
        <form method="post">
            사용자명: <input type="text" name="username"><br>
            비밀번호: <input type="password" name="password"<br>
            <input type="submit" value="로그인">
        </form>
    '''

# Prepared Statement로 인젝션을 방지한 코드
@app.route('/secure_login', methods=['GET', 'POST'])
def secure_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # 안전한 SQL 쿼리 (Prepared Statement 사용)
        query = "SELECT * FROM users WHERE username = ? AND password = ?"
        print("안전한 SQL Query:", query) 
        cur = get_db().execute(query, (username, password))
        user = cur.fetchone()
        
        if user:
            return f"환영합니다, {user[1]}님!"
        else:
            return "로그인 실패"
    
    return '''
        <form method="post">
            사용자명: <input type="text" name="username"><br>
            비밀번호: <input type="password" name="password"><br>
            <input type="submit" value="로그인">
        </form>
    '''

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
